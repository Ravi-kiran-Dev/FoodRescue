# File: azure-pipelines.yml
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Azure Service Connection name (create in Step 4)
  azureServiceConnection: 'Azure-Prod'
  
  # PostgreSQL details (from Azure Portal)
  postgresServerName: 'myapp-db-foodrescue'  # ← REPLACE with your server name
  postgresAdminUser: 'dbadmin'
  postgresAdminPassword: $(POSTGRES_ADMIN_PASSWORD)  # ← Set as pipeline secret

stages:
- stage: Build
  displayName: Build and Test
  jobs:
  - job: BuildJob
    displayName: Build, Unit Test, and Publish
    steps:
    - checkout: self

    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js'

    - script: npm install
      displayName: 'Install dependencies'

    - script: npm test
      displayName: 'Run unit tests'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)'
        ArtifactName: 'drop'

- job: IntegrationTest
  displayName: Run Integration Tests
  pool:
    vmImage: 'ubuntu-latest'
  services:
    postgres:
      image: postgres:14
      env:
        POSTGRES_PASSWORD: testpass
      ports:
        - 5432:5432
      options: >-
        --health-cmd pg_isready
        --health-interval 10s
        --health-timeout 5s
        --health-retries 5
  steps:
  - checkout: self
  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
  - script: npm install
  - script: |
      export DB_HOST=localhost
      export DB_USER=postgres
      export DB_PASSWORD=testpass
      export DB_NAME=postgres
      npm run test:integration
    displayName: 'Run integration tests'

- stage: Deploy
  displayName: Deploy to Azure
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployJob
    displayName: Deploy to App Service
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: AzureWebApp@1
            inputs:
              azureSubscription: $(azureServiceConnection)
              appName: 'webapp-web-foodrescue'  # ← REPLACE with your Web App name
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId)'
              appSettings: |
                -DB_HOST $(postgresServerName).postgres.database.azure.com
                -DB_USER $(postgresAdminUser)@$(postgresServerName)
                -DB_PASSWORD $(POSTGRES_ADMIN_PASSWORD)
                -DB_NAME postgres
                -NODE_ENV production